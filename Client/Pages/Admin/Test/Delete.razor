@page "/admin/test/delete/{CourseId:int}/{Id:int}"
@inject NavigationManager _navigation

<h3>Are you sure to delete the course?</h3>

<EditForm Model="Model" OnSubmit="() => Submit()">
    <div class="form-control">
        <label>Question</label>
        <input type="text" class="form-control" @bind-value="Model!.Question" disabled />
    </div>
    <div class="form-control">
        <label>Answer 1</label>
        <input type="text" class="form-control" @bind-value="Model!.Answer1" disabled />
    </div>
    <div class="form-control">
        <label>Answer 2</label>
        <input type="text" class="form-control" @bind-value="Model!.Answer2" disabled />
    </div>
    <div class="form-control">
        <label>Answer 3</label>
        <input type="text" class="form-control" @bind-value="Model!.Answer3" disabled />
    </div>
    <div class="form-control">
        <label>Answer 4</label>
        <input type="text" class="form-control" @bind-value="Model!.Answer4 " disabled />
    </div>
    <div class="form-control">
        <label>Correct answer</label>
        <input type="text" class="form-control" @bind-value="Model!.CorrectAnswer" disabled />
    </div>
    <div class="form-control">
        <label>Points</label>
        <input type="text" class="form-control" @bind-value="Model!.Points" disabled />
    </div>
    <br />
    <button type="submit">Delete</button>
</EditForm>

@code {
    [Parameter]
    public int CourseId { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Inject]
    public ITestRepository? _testRepository { get; set; }

    public TestDto? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await _testRepository.GetTestById(CourseId, Id);
    }

    async Task Submit()
    {
        await _testRepository.Delete(Id);

        _navigation.NavigateTo($"/admin/test/{CourseId}");
    }
}
